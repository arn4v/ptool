#!/usr/bin/env python3
# Project Tool
# Author: Arnav Gosain <arn4v@outlook.com>
# Version: 0.1
from typing import NoReturn
import argparse
import json
import os
import platform
import shlex
import subprocess
import sys

config_dir = os.path.join(
    os.environ["HOME"],
    "AppData\\Local\\ptool" if platform.system() == "Windows" else ".config/ptool",
)
config_path = os.path.join(config_dir, "ptool.config.json")
configuration = None

if os.path.isfile(config_path):
    configuration = json.load(open(config_path, "r"))
else:
    sys.exit(f"Config at path: {config_path} doesn't exist")


def arguments():
    parser = argparse.ArgumentParser()
    # ptool -c <script/project> <name/path> <lang>
    parser.add_argument("-c", "--create", type=str, nargs=3)
    parser.add_argument("-il", "--license", type=str, nargs=2)
    return parser.parse_args()


class Helper:
    def __init__(self, path, language):
        self.path = os.path.realpath(path)
        self.lang = language

    def __mkdircd(self) -> NoReturn:
        os.mkdir(self.path)
        os.chdir(self.path)

    def __is_lang_valid(self, type: int):
        # type 1 is create_script, type 2 is project
        for language in configuration["languages"]:
            if self.lang == language["language"] or self.lang == language["alias"]:
                if type == 1:
                    return True, language["language"], language["runtime"]
                elif type == 2:
                    return True, language["language"], language["commands"]

    def append_license(self) -> NoReturn:
        if os.path.exists(self.path) == True:
            if os.path.isfile(self.path) == True and os.path.isdir(self.path) != True:
                print("Appending license indentifier")
                with open(self.path, "w") as script:
                    print(script.readlines())
            else:
                sys.exit(self.path + " is a directory, not a file")
        else:
            sys.exit(f"{self.path} doesn't exist")

    def init_script(self) -> NoReturn:
        print("Creating new script")
        lang_valid, language, runtime = self.__is_lang_valid(type=1)
        if lang_valid:
            with open(self.path, "w") as script:
                shebang = f"#!/usr/bin/env {runtime}"
                script.write(shebang)
                script.close()
            print("Created script skeleton at " + self.path)

    def init_project(self) -> NoReturn:
        print("Creating new script")
        lang_valid, language, language_commands = self.__is_lang_valid(type=2)
        if lang_valid:
            print("Initiating new project in " + self.path)
            self.__mkdircd()
            for command in language_commands:
                subprocess.run(shlex.split(command))


def main():
    types = ["script", "project"]
    args = arguments()
    if args.create != None and len(args.create) <= 3:
        c_type, c_path, c_lang = args.create[0], args.create[1], args.create[2]
        if args.create[0] in types:
            if c_type == "script":
                Helper(path=c_path, language=c_lang).init_script()
            elif c_type == "project":
                Helper(path=c_path, language=c_lang).init_project()

            if args.license:
                Helper(path=c_path, language=c_lang).append_license()
        else:
            sys.exit(f"{args.create[0]} is not a valid type")
    else:
        sys.exit(
            "Not enough arguments passed.\nExample usage: ptool --create project hello"
        )


if __name__ == "__main__":
    main()
