#!/usr/bin/env python3
# Author: Arnav Gosain <arn4v@outlook.com>
import argparse
import json
import os
import platform
import shlex
import shutil
import sys

parser = argparse.ArgumentParser()
parser.add_argument(
    "-w",
    "--workflow",
    type=str,
    metavar="workflow",
    help="Run --list_workflows to get a list of your workflows.",
)
parser.add_argument("-p", "--path", type=str, default=None)
parser.add_argument("-ne", "--no-extend", action="store_true")
parser.add_argument("--add-workflow", action="store_true")
parser.add_argument(
    "--delete-workflow", type=str, default=None, metavar="workflow",
)
parser.add_argument("--list-workflows", action="store_true")
parser.add_argument("--open-config", action="store_true")

config_dir = os.path.join(
    os.environ["HOME"],
    "AppData\\Local\\ptool" if platform.system() == "Windows" else ".config/ptool",
)
config_fpath = os.path.join(config_dir, "ptool.config.json")

if not os.path.exists(config_dir):
    os.mkdir(config_dir)

if not os.path.exists(config_fpath):
    with open(config_fpath, "w") as conf:
        conf.write(json.dumps({"config_version": "0.2", "workflows": []}, indent=4))

    while True:
        add_wf = input("Do you want to add a new workflow now? [Y/n] ").casefold()
        if add_wf in ["y", "n"]:
            if add_wf == "y":
                os.system(os.path.abspath(__file__) + " -aw")
                sys.exit(1)
            elif add_wf == "n":
                sys.exit(1)
        else:
            continue

configuration = json.load(open(config_fpath))
workflow_names = [wf["name"] for wf in configuration["workflows"]]


def mkdircd(path: str):
    if not os.path.exists(path):
        os.mkdir(path)
        os.chdir(path)
    else:
        sys.exit(path + " already exists.")


def write_config(new_config: dict):
    with open(config_fpath, "w") as conf:
        conf.write(json.dumps(new_config, indent=4))


def list_workflows():
    for workflow in configuration["workflows"]:
        print(workflow["name"])


def add_workflow():
    conf = configuration
    workflows = conf["workflows"]
    new_workflow = dict()

    for i in range(3):
        name = input("Enter workflow name: ")
        if len(name) > 0:
            new_workflow["name"] = name
            break
    else:
        sys.exit("No workflow name provided, exiting...")

    extends = list()
    while (i := 0) < len(configuration["workflows"]):
        message = (
            "Does this workflow extend a pre-existing workflow? (Leave it empty if not): "
            if i >= 1
            else f"Do you want {new_workflow['name']} to extend another workflow? (Leave it empty if not): "
        )
        extension = input(message)
        if len(configuration["workflows"]) >= 1 and len(extension) > 1:
            extends.append(extension)
        else:
            break
        i += 1

    new_workflow["extends"] = extends

    workflow_commands = list()
    while True:
        command = input("Enter new command (Leave empty to exit): ")
        if len(command) >= 1:
            workflow_commands.append(command)
        else:
            break
    new_workflow["commands"] = workflow_commands

    workflows.append(new_workflow)
    conf["workflows"] = workflows
    write_config(new_config=conf)


def delete_workflow(name: str):
    conf = configuration
    workflows = conf["workflows"]
    names = [wf["name"] for wf in workflows]
    if name in names:
        workflows.pop(names.index(name))
    else:
        print(name + " not a valid workflow. Run ptool -lw to see existing workflows.")
    conf["workflows"] = workflows
    write_config(new_config=conf)


def open_config():
    if os.environ.get("EDITOR") != None:
        os.system(shutil.which(os.environ["EDITOR"]) + " " + config_fpath)
    else:
        sys.exit("Please add $EDITOR in your system variables")


executed_workflows = list()


def exec_extensions(workflow: dict):
    wf = workflow
    for extension in wf["extends"]:
        if extension not in executed_workflows:
            extension = configuration["workflows"][workflow_names.index(extension)]
            print("Running " + extension["name"] + " commands!")
            for command in extension["commands"]:
                os.system(command)
            executed_workflows.append(extension)
            if len(extension["extends"]) > 0:
                exec_extensions(extension)


def exec_workflow(path: str, workflow: str, no_extend: bool):
    fpath = os.path.abspath(".") if path is None else os.path.abspath(path)

    if path is not None:
        if os.path.exists(fpath) and os.path.isdir(fpath):
            os.chdir(fpath)
        else:
            mkdircd(fpath)

    print("Current path: " + fpath)

    if workflow in workflow_names:
        print("Initiating new project in " + fpath)
        wf = configuration["workflows"][workflow_names.index(workflow)]

        if no_extend is False:
            try:
                exec_extensions(workflow=wf)
            except:
                pass
        else:
            print("Not extending " + ",".join(wf["extends"]))

        print("Running " + wf["name"] + " commands!")
        for command in wf["commands"]:
            os.system(command)

        print("Done ðŸŽ‰")
    else:
        sys.exit(workflow + " is invalid.")


def main():
    args = parser.parse_args()
    if args.workflow:
        exec_workflow(path=args.path, workflow=args.workflow, no_extend=args.no_extend)
    elif args.list_workflows:
        list_workflows()
    elif args.add_workflow:
        add_workflow()
    elif args.delete_workflow != None and len(args.delete_workflow) >= 1:
        delete_workflow(args.delete_workflow)
    elif args.open_config:
        open_config()
    elif len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
