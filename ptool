#!/usr/bin/env python3
# Author: Arnav Gosain <arn4v@outlook.com>
import argparse
import json
import os
import platform
import shlex
import sys

parser = argparse.ArgumentParser()
# ptool -c <script/project> <name/path> <lang>
parser.add_argument("-c", "--create", metavar="N", nargs=3)
parser.add_argument("-al", "--append-license", type=str, nargs=1)
parser.add_argument("-aw", "--add-workflow", action="store_true")
parser.add_argument(
    "-dw", "--delete-workflow", default=None, type=str, metavar="<workflow_name>"
)
parser.add_argument("-lw", "--list-workflows", action="store_true")

config_dir = os.path.join(
    os.environ["HOME"],
    "AppData\\Local\\ptool" if platform.system() == "Windows" else ".config/ptool",
)
config_fpath = os.path.join(config_dir, "ptool.config.json")

if not os.path.exists(config_dir):
    os.mkdir(config_dir)

if not os.path.exists(config_fpath):
    with open(config_fpath, "w") as conf:
        conf.write(json.dumps({"workflows": []}, indent=4))

    while True:
        add_wf = input("Do you want to add a new workflow now? [Y/n] ").casefold()
        if add_wf in ["y", "n"]:
            if add_wf == "y":
                os.system(os.path.abspath(__file__) + " -aw")
                sys.exit(1)
            elif add_wf == "n":
                sys.exit(1)
        else:
            continue

configuration = json.load(open(config_fpath))


def mkdircd(path: str):
    if not os.path.exists(path):
        os.mkdir(path)
        os.chdir(path)
    else:
        sys.exit(path + " already exists.")


def write_config(new_config: dict):
    with open(config_fpath, "w") as conf:
        conf.write(json.dumps(new_config, indent=4))


def list_workflows():
    for workflow in configuration["workflows"]:
        print(workflow["name"])


def add_workflow():
    conf = configuration
    workflows = conf["workflows"]
    new_workflow = dict()
    new_workflow["name"] = input("Enter workflow name: ")

    if len(configuration["workflows"]) >= 1:
        new_workflow["extends"] = input(
            "Does this workflow extend a pre-existing workflow? (Leave it empty if not): "
        )
    else:
        new_workflow["extends"] = ""

    workflow_commands = list()
    while True:
        command = input("Enter new command (Leave empty to exit): ")
        if len(command) >= 1:
            workflow_commands.append(command)
        else:
            break
    new_workflow["commands"] = workflow_commands

    workflows.append(new_workflow)
    conf["workflows"] = workflows
    write_config(new_config=conf)


def delete_workflow(name: str):
    conf = configuration
    workflows = conf["workflows"]
    names = [wf["name"] for wf in workflows]
    if name in names:
        workflows.pop(names.index(name))
    else:
        print(name + " not a valid workflow. Run ptool -lw to see existing workflows.")
    conf["workflows"] = workflows
    write_config(new_config=conf)


def init_project(path: str, workflow: str):
    path = os.path.abspath(path)
    names = (
        [wf["name"] for wf in configuration["workflows"]]
        if len(configuration["workflows"]) >= 1
        else sys.exit(1)
    )
    mkdircd(path)
    if workflow in names:
        wf = configuration["workflows"][names.index(workflow)]
        print("Initiating new project in " + path)
        try:
            if wf["extends"] in names:
                print("Running " + wf["extends"] + " commands!")
                for command in configuration["workflows"][names.index(wf["extends"])][
                    "commands"
                ]:
                    os.system(command)
        except:
            pass

        print("Running " + wf["name"] + " commands!")
        for command in wf["commands"]:
            os.system(command)

        print("Done ðŸŽ‰")


def main():
    args = parser.parse_args()
    if args.create != None and len(args.create) <= 3:
        if args.create[0] == "project":
            init_project(path=args.create[2], workflow=args.create[1])
        else:
            sys.exit(
                args.create[0] + "is not a valid type. Valid types: project, script",
            )
    elif args.list_workflows:
        list_workflows()
    elif args.add_workflow:
        add_workflow()
    elif args.delete_workflow != None and len(args.delete_workflow) >= 1:
        delete_workflow(args.delete_workflow)
    elif len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
